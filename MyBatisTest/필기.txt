MyBatis(iBatis)
- 영속성 계층(= 데이터베이스 조작 계층
- JDBC 역할
- 응용 프로그램 <-> JDBC <-> 데이터베이스
- 응용 프로그램 <-> MyBatis <-> 데이터베이스

Spring Mybatis
- 스프링 프로젝트 중 하나
1. XML Mapper를 사용하는 방식
2. Interface Mapper를 사용하는 방식

프로젝트 설정
1. pom.xml
	- JDK 11
	- Spring 5.0.7

2. pom.xml
	- MyBatis > 의존성 추가
	- ojdbc6.jar > lib 복사

MyBatisTest > JDBC 연결 테스트
- 업무 구현이 아닌 테스트 해보기
- src/test/main > "com.test.mybatis.persistence" > "JDBCTest.java"

Connrction 객체 생성
- DBUtil.open() > DB 연결 > Connection 객체 생성 X 반복
- 모두 DB 연결하면 관리되지 않는 Connection 객체들이 메모리를 차지해서 성능을 느리게 만듬
- 사용 완료된 Connection은 close()를 해야함, 하지만 번거로움

Connection Pool, 커넥션 풀
- Commons DBCP
- Tomcat DBCP
- HikariCP > 스프링 부트 2.0부터 기본으로 사용

Commons DBCP
- pom.xml > commons-dbcp 의존성 추가
- WEB-INF > spring > root-context.xml > 설정 추가
- com.test.mybatis.persistence > "DBCPTest.java"

HikariCP
- pom.xml > 의존성 추가
- root-context.xml > 설정 추가

MyBatis
- pom.xml > 의존성 추가(4개)
- root-context.xml > 설정 추가
- com.test.mybatis.persistence > "MapperTest.java"


SQL 실행
- "com.test.controller" > "MyBatisController.java"
- "com.test.persistence" > "MyBatisDAO.java"(I)
						 > "MyBatisDAOImpl.java"(C)
						 
- "com.test.domain" > "MyBatisDTO.java"

- src/main/resources > mapper > "mybatis.xml"

- views > "list.jsp"
		> "add.jsp"
		> "addok.jsp"

- MyBatisTest > "script.sql"						 